#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
'''
Math modeling
genetic algorithms solving the MTSP question in Question 1
touched on Sat Dec 16
Yimin Gu
'''
from random import *
from math import *


cities = 66    #all 66 cities
travelers = 14  #all 14 travelers
T = 200     #generations
N = 500     #population

pc = 0.8    #crossover probability
pm = 0.1    #mutation probability

dist = [[0 for col in range(cities)] for row in range(cities)]
speed = 60
#installation time of each city, in question 1, all is same.
#I'll take the average value, 1.1 hours, and exchange time to distance
#with speed 60km/h
installtimelength = [1.1 * 60 for i in range(cities)]
#the start point 0 don't need install time
installtimelength[0] = 0

#select probabilities
selection = [0.0 for i in range(N)]

class individual:
    #init with a random route for each indiviudal
    def __init__(self):
        #fitness of each individual, smaller is better
        self.fitness = 0
        #the chromosomes -- S
        #each individual from the population:
        #each traveler -- S_i: S_1 to S_travelers
        #   m-bit non-negative integer number(m means cities)
        #       S_i_1 to S_i_m
        #   each digit not larger than m
        #S_i_j = k:traveler i goto city k in the j-th step globally
        #S_i_j = 0:traveler i don't move in the j-th step globally
        #note that S_*_j only has only one non-zero value while *
        #goes from 1 to traveler
        #NOTE: actually only m-1 is needed, but use m is easier for programming
        #it has caused troubles, but I'm too lazy to fix that
        self.chrm = [[0 for i in range(cities)] for j in range(travelers)] 
        t = [x for x in range(cities)]
        shuffle(t)
        for i in range(cities):
            self.chrm[randint(0, travelers - 1)][i] = t[i]


#global minimum distance
mindistance = 999999.99
mindistancenow = 999999.99
mindistancehistory = 999999.99
minindividualhistory = individual()

#the population and popnew for temp storage
population = [individual() for i in range(N)]
popnew = [individual() for i in range(N)]

def initialize():
    print("initialize...")
    #read data2.txt containing shortest path generated by floyd.py
    global dist
    fin = open("data2.txt", "r")
    for i in range(cities):
        data = fin.readline()
        dist[i] = [float(j) for j in data.split()]
    fin.close()
    #init selector
    global selection
    p = [0 for i in range(N)]
    pall = 0
    a = 1.1
    b = 2 * a - 2
    #get probability of each individual and total probability
    for i in range(N):
        n = i + 1
        p[i] = (a - b / (n + 1)) / (n)
        pall += p[i]
    #build up the selection, selection goes from smaller to larger
    for i in range(N):
        selection[i] = p[i] / pall
    for i in range(1, N):
        selection[i] += selection[i - 1]

#calculate the fitness of each individual #2
def calc_fitness2():
    global mindistancehistory
    global minindividualhistory
    global mindistancenow
    print("calulate fitness #2...")
    mindistancelocal = -1
    for i in range(N):
        for j in range(travelers):
            length = 0
            #start from city 0
            citynow = 0
            for k in range(cities):
                citynext = population[i].chrm[j][k]
                if citynext != 0:
                    length += dist[citynow][citynext]
                    citynow = citynext
                    #"length" at-install
                    length += installtimelength[citynow]
            #go back to city 0
            length += dist[citynow][0]
            mindistancelocal = max(mindistancelocal, length)
        population[i].fitness = mindistancelocal
        mindistancenow = mindistancelocal
        if mindistancelocal < mindistancehistory:
            mindistancehistory = mindistancelocal
            minindividualhistory = population[i]

#calculate the fitness of each individual
def calc_fitness():
    global mindistance
    print("calulate fitness...")
    mindistance = 999999.99
    for i in range(N):
        length = 0
        for j in range(travelers):
            #start from city 0
            citynow = 0
            for k in range(cities):
                citynext = population[i].chrm[j][k]
                if citynext != 0:
                    #length on-way, from citynow to citynext
                    # print(citynow, citynext)
                    length += dist[citynow][citynext]
                    citynow = citynext
                    #"length" at-install
                    length += installtimelength[citynow]
            #go back to city 0
            length += dist[citynow][0]
        population[i].fitness = length
        mindistance = min(mindistance, length)

#linear ranking selection
#probability of individual i: 
#p[i]=(a-b/(n+1))/n
#n is ranking
#a and b are constants 1<=a<=2, always 1.1, b=2a-2
def select():
    print("select...")
    global population
    global popnew
    #sort
    population = sorted(population, key = lambda x: x.fitness)
    #choose randomly
    for i in range(N):
        #random real number from 0 to 1
        rand = random()
        idx = 0
        while rand > selection[idx]:
            idx += 1
        # print(idx)
        popnew[i] = population[idx]
    #copy
    for i in range(N):
        population[i] = popnew[i]

#input a individual's chromosome
#return striped(without zeros, a one-dimension array) chrm
def strip(chrm):
    return [sum(chrm[j][i] for j in range(travelers)) for i in range(cities)]
#input a striped chromosome and the individual's original chromosome
#return expanded chrm
def expand(schrm, chrm):
    #all these verbose code is cause by <m or m-1> problem!
    #(see defination of individual and chrm for more info)
    schrm = [x for x in schrm if x]
    flag = 0
    for i in range(cities):
        for j in range(travelers):
            if chrm[j][i] != 0:
                t = schrm[flag]
                chrm[j][i] = t
                flag += 1
                break
    return chrm
#check if a chrm is OK, for debug use
def chrmck(chrm):
    h = [0 for i in range(cities)]
    for j in range(cities):
        t = 0
        for i in range(travelers):
            if chrm[i][j] != 0:
                h[chrm[i][j]] += 1
                t += 1
        if t > 1:
            print("No")
            return -1
    for i in range(1, cities):
        if h[i] != 1:
            print("No")
            return -1
    print("Yes")
    return 1
def crossover():
    #order crossover (OX)
    #choose 2 random crossover points
    #exchange crossover parts
    #keep relative sequence of cities
    #a1 = 0 1 2 3 4 5 6 7 8 9
    #a2 = 9 8 7 6 5 4 3 2 1 0
    #OX points: ^1  ^2
    #b1 = 0 1 2|6 5 4|6 7 8 9
    #b2 = 9 8 7|3 4 5|6 7 8 9
    #a1 from point 2:6 7 8 9 0 1 2 3 4 5
    #remove 6 5 4:7 8 9 0 1 2 3
    #refill from point 2:1 2 3|6 5 4|7 8 9 0
    print("crossover...")
    #pair randomly using shuffled array
    h = [i for i in range(N)]
    shuffle(h)
    for i in range(int((N - 1) / 2)):
        if random() > pc:
            #crossover i and N-i-1
            # print('---')
            #strip
            a1 = strip(population[h[i]].chrm)
            a2 = strip(population[h[N - i - 1]].chrm)
            # print('a1:', a1)
            # print('a2:', a2)
            # if sum(a1) - sum(range(cities)) != 0:
                # print('a1!: ', sum(a1) - sum(range(cities)))
            # if sum(a2) - sum(range(cities)) != 0:
                # print('a2!: ', sum(a2) - sum(range(cities)))
            pos1, pos2 = sorted((randint(0, cities - 1), randint(0, cities - 1)))
            # print('pos1, pos2: ', pos1, pos2)
            length = pos2 - pos1 + 1
            ta = a1[pos1:pos2 + 1]
            tb = a2[pos1:pos2 + 1]
            #remove
            t1 = [x for x in (a1[pos2 + 1:] + a1[:pos2 + 1]) if not x in tb]
            t2 = [x for x in (a2[pos2 + 1:] + a2[:pos2 + 1]) if not x in ta]
            #refill
            afinal = t1[pos1:] + tb + t1[:pos1]
            bfinal = t2[pos1:] + ta + t2[:pos1]
            
            # print('afinal :', afinal)
            # print('bfinal :', bfinal)
            
            # h = [0 for j in range(cities)]
            # for j in range(cities):
                # h[afinal[j]] += 1
            # print('afinal:', h)
            # h = [0 for j in range(cities)]
            # for j in range(cities):
                # h[bfinal[j]] += 1
            # print('bfinal:', h)
            
            # if sum(afinal) - sum(range(cities)) != 0:
                # print('afinal!: ', sum(afinal) - sum(range(cities)))
            # if sum(bfinal) - sum(range(cities)) != 0:
                # print('bfinal!: ', sum(bfinal) - sum(range(cities)))

            #expand
            population[h[i]].chrm = expand(afinal, population[h[i]].chrm)
            population[h[N - i - 1]].chrm = expand(bfinal, population[h[N - i - 1]].chrm)
            # chrmck(population[i].chrm)
            # chrmck(population[N - i - 1].chrm)
            # print('---')

def mutation():
    print("mutation...")
    for i in range(N):
        #two kind of mutation, each probability is 0.5 * pm
        for j in range(travelers):
            rand = random()
            # if rand < pm * 0.5:
            if 0:
                # print("mutation -- reverse...")
                #1. reverse a slice of chrm(only non-zero value) between ranint1 and ranint2
                ranint1, ranint2 = sorted((randint(0, cities - 1), randint(0, cities - 1)))
                #t is population[i].chrm[j] with zeros striped
                t = [x for x in population[i].chrm[j] if x]
                t.reverse()
                #assign back reversed values
                #I think this part is ugly and verbose
                flag = 0
                for k in range(cities):
                    if population[i].chrm[j][k] != 0:
                        population[i].chrm[j][k] = t[flag]
                        flag += 1
        rand = random()
        if rand < pm * 0.5:
        # if 0:
        # if 1:
            # print("mutation -- exchange...")
            # print('--before--:', sum(range(0, cities)) - sum(strip(population[i].chrm)))
            #2. exchange.
            #randomly find s_i_k = 0, s_j_l != 0, and swap them (showed in <>)
            #exist s_i'_k !=0, i' in {1 to n} \ {i}
            #random j' in {1 to n}
            #swap s_i'_k and s_j'_l (showed in ())
            #n equals travelers
            #       l      k           l      k
            #j'----(0)-----0--    ----(X)-----0--
            #j ----<A>-----0--    ----<0>-----0--
            #  -----0------0--    -----0------0--
            #  -----0------0-- => -----0------0--
            #i'-----0-----(X)-    -----0-----(0)-
            #i -----0-----<0>-    -----0-----<A>-
            #  -----0------0--    -----0------0--
            #with prefix s to avoid conflict with loop variables
            # print('before')
            # for j in range(travelers):
                # for k in range(cities):
                    # print('%2d' % (population[i].chrm[j][k]), end='')
                # print('')
            # si = 0; sk = 0; sj = 0; sl = 0; sii = 0; sjj = 0
            #count the num of 0 and non-0, for random
            cnt0 = 0; cntnon0 = 0
            for j in range(travelers):
                for k in range(cities):
                    # print("--"+str(i)+"--"+str(j)+"--"+str(k)+"--")
                    if population[i].chrm[j][k] == 0:
                        cnt0 += 1
                    else:
                        cntnon0 += 1
            rand0 = 0; randnon0 = 0
            #these ==0 cases won't happen normally
            if cnt0 != 0:
                rand0 = randint(1, cnt0)
            if cntnon0!= 0:
                randnon0 = randint(1, cntnon0)
            cnt0 = 0; cntnon0 = 0
            for j in range(travelers):
                for k in range(cities):
                    if population[i].chrm[j][k] == 0:
                        cnt0 += 1
                    else:
                        cntnon0 += 1
                    #now judge
                    if cnt0 == rand0:
                        si = j
                        sk = k
                        #a stupid way to make sure si sk not be changed again
                        cnt0 = 999999
                    if cntnon0 == randnon0:
                        sj = j
                        sl = k
                        cntnon0 = 999999
            #find i'
            sii = 0
            for j in range(travelers):
                if population[i].chrm[j][sk] != 0:
                    sii = j
                    break
            #random j'
            sjj = randint(0, travelers - 1)
            # print("si:%d sk:%d sj:%d sl:%d sii:%d sjj:%d" % (si, sk, sj, sl, sii, sjj))
            #swap #1
            population[i].chrm[si][sk], population[i].chrm[sj][sl] = \
                (population[i].chrm[sj][sl], population[i].chrm[si][sk])
            #swap #2
            population[i].chrm[sii][sk], population[i].chrm[sjj][sl] = \
                (population[i].chrm[sjj][sl], population[i].chrm[sii][sk])
            # print('--after--:', sum(range(0, cities)) - sum(strip(population[i].chrm)))
            # for j in range(travelers):
                # for k in range(cities):
                    # print('%2d' % (population[i].chrm[j][k]), end='')
                # print('')

def print_result():
    maxi = 0
    for i in range(N):
        if population[i].fitness < population[maxi].fitness:
            maxi = i
    print("min distance now found:", round(population[maxi].fitness, 5))
    # print("min time: ", str(round(population[maxi].fitness / speed, 5)))
    for i in range(travelers):
        print("traveler ", i, ":")
        print([population[maxi].chrm[i][x] for x in range(cities) if population[maxi].chrm[i][x]])
    print("min distance in history:", round(mindistancehistory, 5))
    for i in range(travelers):
        print("traveler history", i, ":")
        print([minindividualhistory.chrm[i][x] for x in range(cities) if minindividualhistory.chrm[i][x]])


#begin of main
initialize()
#main loop
calc_fitness()
for t in range(T):
    print("generation " + str(t) + ": min distance: " + str(round(mindistancenow, 5)))
    crossover()
    mutation()
    calc_fitness2()
    select()
print_result()
print("end.")

